/* 
 * Copyright 2013, The Thymeleaf Project (http://www.thymeleaf.org/)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.psxpaul.task.ExecFork
import org.apache.tools.ant.filters.ReplaceTokens

import java.time.LocalDate
import java.time.format.DateTimeFormatter

/**
 * Gradle build script for the Thymeleaf Docs project, converts the
 * documentation files, in Markdown format, into HTML and PDF formats.
 * 
 * @author Emanuel Rabina
 */

plugins {
	id 'java'
	id 'war'
	id 'com.github.psxpaul.execfork' version '0.2.2'
	id 'org.gretty' version '4.0.3'
}

repositories {
	mavenCentral()
	maven {
		url 'https://plugins.gradle.org/m2/'
	}
}

gretty {
	scanInterval 0
}

// Replaces @projectVersion@ and @documentVersion@ placeholders in the docs
def documentMetadata = [
  '2.1': [
	  version: '2.1.6.RELEASE',
	  date: LocalDate.of(2017, 11, 5)
  ],
	'3.0': [
	  version: '3.0.11.RELEASE',
		date: LocalDate.of(2018, 10, 29)
	],
	'3.1': [
	  version: '3.1.2.RELEASE',
		date: LocalDate.of(2023, 7, 30)
	]
]

def conversions = [
	articles: ['html'],
	tutorials: ['html', 'ebook', 'pdf']
]
def docsDir      = file("${projectDir}/docs")
def imagesDir    = file("${projectDir}/images")
def scriptsDir   = file("${projectDir}/scripts")
def stylesDir    = file("${projectDir}/styles")
def templatesDir = file("${projectDir}/templates")
def srcDir       = file("${buildDir}/source")
def outputDir    = file("${buildDir}/site/doc")

project.webAppDirName = outputDir

def docNames = [] as Set
def docTypes = [:]


/**
 * Copy all docs and resources to the source dir, from where they will be fed to
 * pandoc. Also, during this copy operation markdown files will be filtered so
 * that Gradle properties are resolved in their metadata sections.
 * 
 * Note that, for doc files, the name of the folder they are immediately in will
 * be considered their "document type", and this will have an influence on the
 * type of conversions that will be applied to them.
 */
tasks.register('copyResources') {
	doLast {

		// Copy docs files to the src folder. For markdown files, apply property filtering and build the name-type map
		copy {
			from docsDir
			into srcDir

			filesMatching('**/*.md') {

				// We need a file path relative to the 'docs' folder
				def docFileName = (it.relativePath.toString() - ".md").replace('\\', '/')
				def docFileType = it.file.parentFile.name
				def thymeleafVersion = null

				// The parent folder in some cases might be a version number (e.g. tutorials for 2.1, 3.0...) In
				// such case, we need to obtain the document type from the parent of the parent. Note three types
				// of version specifications are allowed: '2.1', '2.1.4', '2.1.x'
				if (docFileType ==~ /\d+\.\d+(\.\d+)?/ || docFileType ==~ /\d+\.\d+(\.x)?/) {
					thymeleafVersion = it.file.parentFile.name
					docFileType = it.file.parentFile.parentFile.name
				}

				docNames.add(docFileName)
				docTypes.put(docFileName, docFileType)

				// Property filtering, this will replace all @gradle-properties@ (mainly used in markdown metadata)
				var documentMetadataForVersion = documentMetadata[(thymeleafVersion)]
				if (documentMetadataForVersion) {
					def documentVersion = DateTimeFormatter.ofPattern('yyyyMMdd - dd MMMM yyyy', Locale.ENGLISH).format(documentMetadataForVersion.date)
					def projectVersion = documentMetadataForVersion.version

					filter(ReplaceTokens, tokens: [
						documentVersion: documentVersion,
						projectVersion : projectVersion
					])
				}
			}
		}

		// Copy all resource directories straight over
		copy {
			from scriptsDir
			into "${srcDir.path}/scripts"
		}
		copy {
			from imagesDir
			into "${srcDir.path}/images"
		}
		copy {
			from stylesDir
			into "${srcDir.path}/styles"
		}

		// Generate output directory structure
		mkdir outputDir
	}
}

/**
 * Generate HTML versions of the Thymeleaf documentation.
 */
tasks.register('generateDocsHTML') {
	dependsOn 'copyResources'
	description "Generate HTML docs from Thymeleaf's markdown docs"

	doLast {
		docNames.each { docName ->
			def docType = docTypes.get(docName)

			if (conversions[docType].contains('html')) {
				println "Generating HTML doc for ${docName} (${docType})..."

				def outputFile = file("${outputDir}/${docName}.html")
				file(outputFile.parent).mkdirs()
				exec {
					commandLine = "pandoc"
					args = [
						"--write=html5",
						"--template=" + file("${templatesDir.path}/${docType}.html"),
						"--wrap=none",
						"--toc",
						"--toc-depth=4",
						"--section-divs",
						"--no-highlight",
						"--output=" + outputFile,
						"${srcDir.path}/${docName}.md"
					]
				}
			}
		}

		// Copy over resources needed for the HTML docs
		copy {
			from srcDir
			into outputDir
			exclude '**/*.md'
		}
	}
}

/**
 * Generate e-books of the Thymeleaf documentation.
 */
tasks.register('generateDocsEbook') {
	description "Generate e-books from Thymeleaf's markdown docs"
	dependsOn 'copyResources'

	doLast {
		// Currently only limited to tutorials
		docNames.each { docName ->
			def docType = docTypes.get(docName)

			if (conversions[docType].contains('ebook')) {
				println "Generating E-Book docs for ${docName} (${docType})..."

				def epubOutputFile = file("${outputDir}/${docName}.epub")
				def mobiOutputFile = file("${outputDir}/${docName}.mobi")
				file(epubOutputFile.parent).mkdirs()

				def inputFile = file("${srcDir.path}/${docName}.md")

				exec {
					// We need to set the working dir in order for pandoc to find images
					workingDir = file(inputFile.parent)
					commandLine = "pandoc"
					args = [
						"--write=epub",
						"--template=" + file("${templatesDir.path}/${docType}.epub"),
						"--toc",
						"--toc-depth=4",
						"--section-divs",
						"--output=" + epubOutputFile,
						inputFile
					]
				}
				exec {
					commandLine = "ebook-convert"
					args = [
						epubOutputFile,
						mobiOutputFile
					]
				}
			}
		}
	}
}

/**
 * Uses a combination of the Gretty and ExecFork plugins to start a server in a
 * background process.  This is because Gretty by itself blocks the existing
 * thread until the server is shut down via other means.
 */
tasks.register('startServer', ExecFork) {
	dependsOn 'war'

	commandLine = './gradlew'
	args = ['appStartWar']
	waitForOutput = 'Run \'gradle appStop\' to stop the server'
}

/**
 * Generate PDF versions of the Thymeleaf documentation.  Uses a Jetty server to
 * host the HTML documents and wkhtmltopdf which uses the server to read files
 * via the http:// protocol (otherwise the same-origin restriction kicks in, as
 * do some file:// bugs on Windows) and saves them as PDF documents.
 */
tasks.register('generateDocsPDF') {
	description "Generate PDF documents from Thymeleaf's HTML docs"
	dependsOn 'generateDocsHTML', 'startServer'

	doLast {
		// Generate the PDF documents from the modified HTML documents
		fileTree(outputDir) { include '*/**/*.html' }.each { docFile ->

			def folderBase = relativePath(file(outputDir))
			def docName = (relativePath(docFile).substring(folderBase.length() + 1) - ".html")
			def docType = docTypes.get(docName)

			if (conversions[docType].contains('pdf')) {
				println "Generating PDF doc for ${docName} (${docType})..."

				exec {
					commandLine = 'wkhtmltopdf'
					args = [
						"--print-media-type",
						"--dpi", "300",
						"--javascript-delay", "1000",
						"--margin-bottom", "15",
						"--footer-spacing", "5",
						"--footer-font-size", "8",
						"--footer-font-name", "'Ubuntu'",
						"--footer-right", "Page [page] of [topage]",
						"--quiet",
						"http://localhost:8080/thymeleaf-docs/${docName}.html",
						file("${outputDir}/${docName}.pdf")
					]
				}
			}
		}

		exec {
			commandLine = './gradlew'
			args = ['appStop']
		}
	}
}

/**
 * Generate HTML, E-book and PDF versions of the Thymeleaf documentation.
 */
tasks.register('generateDocs') {
	dependsOn 'generateDocsHTML', 'generateDocsEbook', 'generateDocsPDF'

	// Just an aggregator task
}

tasks.named('build') {
	dependsOn 'generateDocs'
}
